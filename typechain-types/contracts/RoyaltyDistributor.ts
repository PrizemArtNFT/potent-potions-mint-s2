/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RoyaltyDistributorInterface extends utils.Interface {
  functions: {
    "addReceiver(address,uint256)": FunctionFragment;
    "cumulativePercentage()": FunctionFragment;
    "distributeBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "receiverCount()": FunctionFragment;
    "receivers(uint256)": FunctionFragment;
    "receiversArrayLength()": FunctionFragment;
    "removeReceiver(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addReceiver"
      | "cumulativePercentage"
      | "distributeBalance"
      | "owner"
      | "receiverCount"
      | "receivers"
      | "receiversArrayLength"
      | "removeReceiver"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addReceiver",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiverCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiversArrayLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReceiver",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiverCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receivers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiversArrayLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentReceived(uint256)": EventFragment;
    "ReceiverAdded(address,uint256)": EventFragment;
    "ReceiverRemoved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiverAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiverRemoved"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentReceivedEventObject {
  amount: BigNumber;
}
export type PaymentReceivedEvent = TypedEvent<
  [BigNumber],
  PaymentReceivedEventObject
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export interface ReceiverAddedEventObject {
  wallet: string;
  percentage: BigNumber;
}
export type ReceiverAddedEvent = TypedEvent<
  [string, BigNumber],
  ReceiverAddedEventObject
>;

export type ReceiverAddedEventFilter = TypedEventFilter<ReceiverAddedEvent>;

export interface ReceiverRemovedEventObject {
  wallet: string;
  percentage: BigNumber;
}
export type ReceiverRemovedEvent = TypedEvent<
  [string, BigNumber],
  ReceiverRemovedEventObject
>;

export type ReceiverRemovedEventFilter = TypedEventFilter<ReceiverRemovedEvent>;

export interface RoyaltyDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoyaltyDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cumulativePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    receiverCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    receivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { wallet: string; percentage: BigNumber }>;

    receiversArrayLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addReceiver(
    wallet: PromiseOrValue<string>,
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cumulativePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  distributeBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  receiverCount(overrides?: CallOverrides): Promise<BigNumber>;

  receivers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { wallet: string; percentage: BigNumber }>;

  receiversArrayLength(overrides?: CallOverrides): Promise<BigNumber>;

  removeReceiver(
    wallet: PromiseOrValue<string>,
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cumulativePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    distributeBalance(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    receiverCount(overrides?: CallOverrides): Promise<BigNumber>;

    receivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { wallet: string; percentage: BigNumber }>;

    receiversArrayLength(overrides?: CallOverrides): Promise<BigNumber>;

    removeReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PaymentReceived(uint256)"(amount?: null): PaymentReceivedEventFilter;
    PaymentReceived(amount?: null): PaymentReceivedEventFilter;

    "ReceiverAdded(address,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      percentage?: null
    ): ReceiverAddedEventFilter;
    ReceiverAdded(
      wallet?: PromiseOrValue<string> | null,
      percentage?: null
    ): ReceiverAddedEventFilter;

    "ReceiverRemoved(address,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      percentage?: null
    ): ReceiverRemovedEventFilter;
    ReceiverRemoved(
      wallet?: PromiseOrValue<string> | null,
      percentage?: null
    ): ReceiverRemovedEventFilter;
  };

  estimateGas: {
    addReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cumulativePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    distributeBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    receiverCount(overrides?: CallOverrides): Promise<BigNumber>;

    receivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiversArrayLength(overrides?: CallOverrides): Promise<BigNumber>;

    removeReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cumulativePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiverCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiversArrayLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReceiver(
      wallet: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
